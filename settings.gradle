rootProject.name = 'limetrans'

enableFeaturePreview 'STABLE_CONFIGURATION_CACHE'

gradle.rootProject {
    def baseUrl = project.hasProperty('git.baseUrl') ?
        project.getProperty('git.baseUrl') : null

    ext {
        versions = [
            'checkstyle'    : '9.0',
            'commons-cli'   : '1.3.1',
            'commons-io'    : '2.7',
            'elasticsearch' : '2.2.1',
            'jackson'       : '2.13.4',
            'jdk'           : '17',
            'junit'         : '4.13.1',
            'log4j'         : '2.17.1',
            'metafacture'   : '5.4.0',
            'metafix'       : '0.3.0'
        ]

        testMatrix = [
            metafacture: [
                'master-SNAPSHOT'
            ],
            metafix: [
                'master'
            ]
        ]

        gitModules = [
            metafacture: [
                base: 'https://github.com/metafacture',
                repo: 'metafacture-core',
                modules: [
                    'org.metafacture:metafacture-biblio',
                    'org.metafacture:metafacture-commons',
                    'org.metafacture:metafacture-formeta',
                    'org.metafacture:metafacture-framework',
                    'org.metafacture:metafacture-io',
                    'org.metafacture:metafacture-javaintegration',
                    'org.metafacture:metafacture-json',
                    'org.metafacture:metafacture-mangling',
                    'org.metafacture:metafacture-plumbing',
                    'org.metafacture:metafacture-statistics',
                    'org.metafacture:metafacture-strings',
                    'org.metafacture:metafacture-xml',
                    'org.metafacture:metamorph'
                ]
            ],
            metafix: [
                base: 'https://github.com/metafacture',
                repo: 'metafacture-fix',
                modules: [
                    'org.metafacture:metafix'
                ],
                dependency: {
                    it.exclude(group: 'org.slf4j', module: 'slf4j-simple')
                }
            ]
        ]

        versionsProperty = [
            prefix: 'versions',
            separator: '.'
        ]
    }

    def separator = "\\Q${versionsProperty.separator}\\E"
    rootProject.properties.each { key, value ->
        if (value instanceof String && !value.isEmpty()) {
            def parts = key.split(separator)
            if (parts.size() == 2 && parts[0] == versionsProperty.prefix) {
                versions[parts[1]] = value
            }
        }
    }

    sourceControl {
        gitModules.each { key, args ->
            def version = versions[key]
            if (version.matches(~/\d+(?:\..*)?|.*-rc\d+|.*-SNAPSHOT/)) {
                args.version = { prefer version }
            }
            else {
                args.version = { branch = version }

                gitRepository("${baseUrl ?: args.base}/${args.repo}") {
                    args.modules.each { producesModule(it) }
                }
            }
        }
    }
}
