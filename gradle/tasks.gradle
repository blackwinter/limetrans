def (root, extension) = [file('.').toPath(), '.json']

def camelize = { it.replaceAll(~/\b./) { it[0].toUpperCase() } }
def taskName = { prefix, name -> prefix + camelize(name).replaceAll('[^a-zA-Z0-9]', '') }

def propTask = { group, list ->
    def prop = "${project.group}.${group}"

    list.each { value ->
        task(taskName(group, value), group: group, description: "Sets -D${prop}=${value}") {
            doLast { System.properties[prop] = value }
        }
    }
}

// See hbz.limetrans.Main.Env.
propTask('env', ['prod', 'dev', 'd7test', 'local', 'ignore'])

file('src/conf').eachDir {
    def (group, path, map) = [it.getName(), it.toPath(), [:].withDefault { [] }]

    def indexTask = { name, list ->
        task(taskName(group, name), type: JavaExec, group: group, description: list.collect { root.relativize(it.toPath()) }) {
            classpath = sourceSets.main.runtimeClasspath
            mainClass = "${project.group}.Main"
            args list
        }
    }

    it.eachFileMatch(~/.*\Q${extension}\E/) {
        indexTask(it.getName().minus(extension), [it])
    }
}

def execTask = { name, main ->
    task(taskName('exec', name), type: JavaExec, group: 'Exec', description: 'Execute ' + main + '.') {
        classpath = sourceSets.main.runtimeClasspath
        mainClass = main
    }
}

execTask('filter', "${project.group}.filter.Main")
execTask('verify-links', "${project.group}.function.VerifyLinks")
execTask('transformation', "${project.group}.Main")
