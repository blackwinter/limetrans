def (root, extension) = [file('.').toPath(), '.json']

def camelize = { it.replaceAll(~/\b./) { it[0].toUpperCase() } }

file('src/conf').eachDir {
    def (group, path, map) = [it.getName(), it.toPath(), [:].withDefault { [] }]

    def indexTask = { name, list ->
        task(group + name.replaceAll('[^a-zA-Z0-9]', ''), type: JavaExec, group: group,
                description: list.collect { root.relativize(it.toPath()) }) {
            doFirst { systemProperties System.properties }
            classpath = sourceSets.main.runtimeClasspath
            mainClass = 'hbz.limetrans.Main'
            args list
        }
    }

    it.eachFileMatch(~/.*\Q${extension}\E/) {
        def name = camelize(it.getName().minus(extension))
        indexTask(name, [it])
    }
}

def execTask = { name, main ->
    task('exec' + camelize(name), type: JavaExec, group: 'Exec',
            description: 'Execute ' + main + '.') {
        classpath = sourceSets.main.runtimeClasspath
        mainClass = main
    }
}

execTask('transformation', 'hbz.limetrans.Main')
execTask('filter', 'hbz.limetrans.filter.Main')
